datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Organisation {
  id                 String             @id @default(uuid())
  name               String             @unique
  registerPersonName String?
  founderFirstName   String?
  founderLastName    String?
  mobileNumber       String?
  typeOfSchool       String?
  syllabusType       String?
  addressLine1       String?
  addressLine2       String?
  email              String?
  city               String?
  state              String?
  pincode            String?
  mandal             String?
  founderEmail       String?
  founderPassword    String?
  branches           Branch[]
  students           Student[]
  teachers           Teacher[]
  nonTeachingStaff   NonTeachingStaff[]
  management         Management[]
  academicDetails    AcademicDetail[]
  users              User[]
}

model Branch {
  id               Int          @id @default(autoincrement())
  name             String
  organisationId   String 
  organisationName String
  mobileNumber     String?
  founderName      String?
  mainBranch       Boolean ?     @default(false)
  organisation     Organisation @relation(fields: [organisationId], references: [id])
  city             String?
  state            String?
  pincode          String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  users            User[]
}

model User {
  id                    Int                     @id @default(autoincrement())
  name                  String?
  email                 String?                 @unique
  phoneNumber           String?
  password              String?
  role                  String?
  branchId              Int?
  branch                Branch?                 @relation(fields: [branchId], references: [id])
  organisationName      String?
  branchName            String?
  resetCode             String?
  loginOtp              String?
  otpExpiresAt          DateTime?
  studentId             Int?
  accessGroupId         Int?
  accessGroupName String?
  accessGroup           AccessManagementGroup?  @relation(fields: [accessGroupId], references: [id])
  student               Student?                @relation(fields: [studentId], references: [id])
  organisation          Organisation?           @relation(fields: [organisationName], references: [name])
}

model Student {
  id                     Int               @id @default(autoincrement())
  studentImg             String?
  loginId                Int?
  firstName              String?
  lastName               String?
  dob                    DateTime?
  gender                 String?
  bloodGroup             String?
  fatherName             String?
  motherName             String?
  fatherOccupation       String?
  motherOccupation       String?
  emergencyContactName   String?
  emergencyContactNumber String?
  email                  String?
  mobileNumber           String?
  religion               String?
  nationality            String?
  address                String?
  userName               String?
  password               String?
  organisationId         String
  organisation           Organisation      @relation(fields: [organisationId], references: [id])
  users                  User[]
  academicDetails        AcademicDetail[]
}

model AcademicDetail {
  id                      Int          @id @default(autoincrement())
  class                   String?
  modeOfTransportation    String?
  identificationMarks     String?
  studyConductCertificate String?
  transferCertificate     String?
  dateOfJoining           DateTime?
  studentId               Int
  organisationId          String
  organisation            Organisation @relation(fields: [organisationId], references: [id])
  student                 Student      @relation(fields: [studentId], references: [id])
}

model Teacher {
  id                    Int                   @id @default(autoincrement())
  loginId               Int?
  branchName            String?
  teacherImg            String?
  firstName             String?
  lastName              String?
  dob                   DateTime?
  dateOfJoining         DateTime?
  gender                String?
  fatherName            String?
  motherName            String?
  experience            String?
  previousPosition      String?
  previousWorkPlace     String?
  yearOfGraduation      DateTime?
  tenthMarksMemo        String?
  intermediateMarksMemo String?
  graduationCertificate String?
  experienceCertificate String?
  aadharNumber          String?
  bankPassbook          String?
  email                 String?
  mobileNumber          String?
  religion              String?
  nationality           String?
  bloodGroup            String?
  address               String?
  userName              String?
  password              String?
  organisationId        String
  organisation          Organisation          @relation(fields: [organisationId], references: [id])
  employeeInformation   EmployeeInformation[]
}

model NonTeachingStaff {
  id                    Int                   @id @default(autoincrement())
  loginId               Int?
  img                   String?
  firstName             String?
  lastName              String?
  dob                   DateTime?
  dateOfJoining         DateTime?
  gender                String?
  fatherName            String?
  motherName            String?
  email                 String?
  experience            String?
  previousPosition      String?
  previousWorkPlace     String?
  tenthMarksMemo        String?
  intermediateMarksMemo String?
  graduationCertificate String?
  experienceCertificate String?
  aadharNumber          String?
  bankPassbook          String?
  mobileNumber          String?
  religion              String?
  nationality           String?
  address               String?
  userName              String?
  password              String?
  organisationId        String
  organisation          Organisation          @relation(fields: [organisationId], references: [id])
  employeeInformation   EmployeeInformation[]
}

model Management {
  id                    Int                   @id @default(autoincrement())
  img                   String?
  loginId               Int?
  firstName             String?
  lastName              String?
  dob                   DateTime?
  dateOfJoining         DateTime?
  gender                String?
  fatherName            String?
  motherName            String?
  email                 String?
  experience            String?
  previousPosition      String?
  previousWorkPlace     String?
  yearOfGraduation      DateTime?
  tenthMarksMemo        String?
  intermediateMarksMemo String?
  graduationCertificate String?
  experienceCertificate String?
  aadharNumber          String?
  bankPassbook          String?
  mobileNumber          String?
  religion              String?
  nationality           String?
  address               String?
  userName              String?
  password              String?
  organisationId        String
  organisation          Organisation          @relation(fields: [organisationId], references: [id])
  employeeInformation   EmployeeInformation[]
}

model EmployeeInformation {
  id                   Int              @id @default(autoincrement())
  subject              String?
  qualification        String?
  experience           String?
  dateOfGraduation     DateTime?
  dateOfJoining        DateTime?
  class                String?
  teacherId            Int?
  nonTeachingStaffId   Int?
  managementId         Int?
  teacher              Teacher?         @relation(fields: [teacherId], references: [id])
  nonTeachingStaff     NonTeachingStaff? @relation(fields: [nonTeachingStaffId], references: [id])
  management           Management?      @relation(fields: [managementId], references: [id])
}

model AccessManagementGroup {
  id        Int       @id @default(autoincrement())
  groupName String?
  featureId Int?
  roleName String?
  roleId      String? 
  groupType String? 
  role        Role?    @relation(fields: [roleId], references: [id]) 
  users     User[]
  feature   Feature?  @relation(fields: [featureId], references: [id])
}

model Feature {
  id                     Int                      @id @default(autoincrement())
  name                   String
  createAccess           Boolean                  @default(false)
  editAccess             Boolean                  @default(false)
  viewAccess             Boolean                  @default(true)
  deleteAccess           Boolean                  @default(false)
  roleId                 String?
  role                   Role?                    @relation(fields: [roleId], references: [id])
  accessManagementGroups AccessManagementGroup[]
  roleFeatures           RoleFeature[]
}

model Role {
  id           String          @id @default(uuid())
  name         String?
  featureId    Int?
  features     Feature[]
  roleFeatures RoleFeature[]
  groups AccessManagementGroup[]
}

model RoleFeature {
  id           Int      @id @default(autoincrement())
  roleId       String
  featureId    Int
  roleName     String?
  role         Role     @relation(fields: [roleId], references: [id])
  feature      Feature  @relation(fields: [featureId], references: [id])
  createAccess Boolean
  editAccess   Boolean
  viewAccess   Boolean
  deleteAccess Boolean
  @@unique([roleId, featureId])
}
